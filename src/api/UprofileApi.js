/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Uprofile from '../model/Uprofile';

/**
* Uprofile service.
* @module api/UprofileApi
* @version 1.0.0
*/
export default class UprofileApi {

    /**
    * Constructs a new UprofileApi. 
    * @alias module:api/UprofileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createuprofile operation.
     * @callback module:api/UprofileApi~createuprofileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uprofile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Uprofile} uprofile data to be created
     * @param {module:api/UprofileApi~createuprofileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uprofile}
     */
    createuprofile(uprofile, callback) {
      let postBody = uprofile;
      // verify the required parameter 'uprofile' is set
      if (uprofile === undefined || uprofile === null) {
        throw new Error("Missing the required parameter 'uprofile' when calling createuprofile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Uprofile;
      return this.apiClient.callApi(
        '/uprofile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteuprofile operation.
     * @callback module:api/UprofileApi~deleteuprofileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} uprofileId the Id parameter
     * @param {module:api/UprofileApi~deleteuprofileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteuprofile(uprofileId, callback) {
      let postBody = null;
      // verify the required parameter 'uprofileId' is set
      if (uprofileId === undefined || uprofileId === null) {
        throw new Error("Missing the required parameter 'uprofileId' when calling deleteuprofile");
      }

      let pathParams = {
        'uprofileId': uprofileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/uprofile/{uprofileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlluprofile operation.
     * @callback module:api/UprofileApi~getAlluprofileCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Uprofile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/UprofileApi~getAlluprofileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Uprofile>}
     */
    getAlluprofile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Uprofile];
      return this.apiClient.callApi(
        '/uprofile/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsuprofile operation.
     * @callback module:api/UprofileApi~getByParamsuprofileCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Uprofile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/UprofileApi~getByParamsuprofileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Uprofile>}
     */
    getByParamsuprofile(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsuprofile");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Uprofile];
      return this.apiClient.callApi(
        '/uprofile/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getuprofile operation.
     * @callback module:api/UprofileApi~getuprofileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uprofile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} uprofileId the Id parameter
     * @param {module:api/UprofileApi~getuprofileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uprofile}
     */
    getuprofile(uprofileId, callback) {
      let postBody = null;
      // verify the required parameter 'uprofileId' is set
      if (uprofileId === undefined || uprofileId === null) {
        throw new Error("Missing the required parameter 'uprofileId' when calling getuprofile");
      }

      let pathParams = {
        'uprofileId': uprofileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Uprofile;
      return this.apiClient.callApi(
        '/uprofile/{uprofileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateuprofile operation.
     * @callback module:api/UprofileApi~updateuprofileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Uprofile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} uprofileId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Uprofile} opts.uprofile data to be updated
     * @param {module:api/UprofileApi~updateuprofileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Uprofile}
     */
    updateuprofile(uprofileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['uprofile'];
      // verify the required parameter 'uprofileId' is set
      if (uprofileId === undefined || uprofileId === null) {
        throw new Error("Missing the required parameter 'uprofileId' when calling updateuprofile");
      }

      let pathParams = {
        'uprofileId': uprofileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Uprofile;
      return this.apiClient.callApi(
        '/uprofile/{uprofileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
